1.错题
通过在程序中引入“ import javax.swing.*; ”语句，就可以使用 javax.swing 包中的所有类（包括其嵌套的子包中的类）。   （错）
       要使用嵌套子包中的类，必须再次添加 import 子句
       
2.Java 字节码只有被装入到内存中之后，才能被执行。（对）
    在当前计算机体系结构之下，CPU无法直接读取保存于磁盘上的程序文件，这些文件所包容的指令必须被装入到内存之后，CPU才能读取。
    
3.Java Applet 可运行于浏览器中，这意味着浏览器本身就可以直接执行 Applet 程序。（错）
    浏览器本身只认识HTML，它对其他类型信息的支持，比如Flash，Applet，Silverlight应用程序等都是通过启动本地计算机安装的附加插件来实现
    
4.Java程序从源文件创建到程序运行要经过两大步骤
      1、源文件由编译器编译成字节码（ByteCode） 
      2、字节码由java虚拟机解释运行。
因为java程序既要编译同时也要经过JVM的解释运行，所以说Java被称为半解释语言（ "semi-interpreted" language）。
5.基本类型只有 boolean, byte, short, char, int, long, float, double 8种
6.Java 常量池。 
String s1 = "Hello";

        String s2 = "Hello";

        System.out.println(s1 == s2);  // 输出： true

 

        String s3 = new String("Hello");

        String s4 = new String("Hello");

        System.out.println(s3 == s4);  // 输出： false
        JVM 在装载一个 .class 文件时，会在内存中创建一个常量池。
         “ Hello ”是字符串常量， Java 编译器会将“ Hello ”放到常量池中，并给它一个索引
7.String,StringBuilder以及StringBuffer这三个类的区别
　　这三个类之间的区别主要是在两个方面，即运行速度和线程安全这两方面。

  首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder > StringBuffer > String
　　String最慢的原因：

　　String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。以下面一段代码为例：
　　如果运行这段代码会发现先输出“abc”，然后又输出“abcde”，好像是str这个对象被更改了，其实，这只是一种假象罢了，JVM对于这几行代码是这样处理的，首先创建一个String对象str，并把“abc”赋值给str，然后在第三行中，其实JVM又创建了一个新的对象也名为str，然后再把原来的str的值和“de”加起来再赋值给新的str，而原来的str就会被JVM的垃圾回收机制（GC）给回收掉了，所以，str实际上并没有被更改，也就是前面说的String对象一旦创建之后就不可更改了。所以，Java中对String对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。

　　而StringBuilder和StringBuffer的对象是变量，对变量进行操作就是直接对该对象进行更改，而不进行创建和回收的操作，所以速度要比String快很多。

　　另外，有时候我们会这样对字符串进行赋值

1 String str="abc"+"de";
2 StringBuilder stringBuilder=new StringBuilder().append("abc").append("de");
3 System.out.println(str);
4 System.out.println(stringBuilder.toString());
　　这样输出结果也是“abcde”和“abcde”，但是String的速度却比StringBuilder的反应速度要快很多，这是因为第1行中的操作和

　　String str="abcde";

　　是完全一样的，所以会很快，而如果写成下面这种形式

1 String str1="abc";
2 String str2="de";
3 String str=str1+str2;
　　那么JVM就会像上面说的那样，不断的创建、回收对象来进行这个操作了。速度就会很慢。

　　再来说线程安全
　　在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的
　　如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。
  所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。
　　总结一下
　　String：适用于少量的字符串操作的情况
　　StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况
　　StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况
  
  8.在Java中，所有字符均占两个字节，英文汉字一视同仁。 
